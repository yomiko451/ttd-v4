import {Date} from "std-widgets.slint";

export enum Filter {
    Today,
    All,
    Once,
    Daily,
    Weekly,
    Monthly,
    Progress,
}

@rust-attr(derive(serde::Serialize, serde::Deserialize))
export enum SlintWeekday {
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday,
    Saturday,
    Sunday,
}   

@rust-attr(derive(serde::Serialize, serde::Deserialize))
export enum TodoKind {
    Once,
    Daily,
    Weekly,
    Monthly,
    Progress
}

export enum Tab {
    Home,
    Todo,
    Anime,
    News, //TODO 要不要
    Stats, //TODO 要不要
    Setting,
    About
}


export struct Anime {
    name: string,
    cover: image,
}

export struct DayAnime {
    text: string,
    anime-list: [Anime]
}


@rust-attr(derive(serde::Serialize, serde::Deserialize))
export struct Todo {
    id: string,
    text: string,
    created-at: string,
    recurrence: bool,
    is_expired: bool,
    week: SlintWeekday,
    day: int,
    once: Date,
    current-progress: int,
    max-progress: int,
    start-date: Date,
    end-date: Date,
    kind: TodoKind,
    days-to-start: int,
    note: string,
}

export struct CalendarDay {
    date: Date,
    todo-list: [Todo]
}

export global AnimeData {
    callback update-anime-data;// TODO:  add implementation
    in-out property <bool> is-loading: true;
    in-out property <Date> anime-schedule;
    in-out property <[DayAnime]> week-anime-list: [
        {text: "周一（月）", anime-list: []},
        {text: "周二（火）", anime-list: []},
        {text: "周三（水）", anime-list: []},
        {text: "周四（木）", anime-list: []},
        {text: "周五（金）", anime-list: []},
        {text: "周六（土）", anime-list: []},
        {text: "周日（日）", anime-list: []}
    ];
    
}

export global UiData {
    in-out property <length> app-width: 1280px;
    in-out property <length> app-height: 800px;
    in-out property <length> avatar-size: 80px;
    in-out property <length> avatar-size-big: 120px;
    in-out property <color> primary-color:#6AB187;//#88C9A1;//rgb(237, 239, 239);
    in-out property <color> menu-button-clicked-color: rgba(255, 255, 255, 0.2);//#5BB48B;//rgb(221, 221, 221);
    in-out property <length> cover-width: 120px;
    in-out property <length> cover-height: 150px;
    in-out property <color> primary-text-color: #303133;
    in-out property <color> secondry-text-color: #FFFFFF;
    in-out property <color> todo-selected-color: rgba(106, 177, 135, 0.15);
    in-out property <color> warn-color: #FF5252; // TODO: 红色要不要
    in-out property <length> default-font-size: 14px;
    in-out property <length> font-size-small: 12px;
    in-out property <length> font-size-big: 16px;
    in-out property <length> font-size-super-big: 18px;
    in-out property <length> calendar-index-size: 30px;
    in-out property <length> tab-padding-top-bottom: 30px;
    in-out property <length> tab-padding-left-right: 15px;
    out property <int> spinbox-max: 10000;
    in-out property <length> spinbox-width: 110px;
    in-out property <length> combobox-width: 100px;
    in-out property <length> space: 5px;
    in-out property <length> space-big: 15px;
    in-out property <length> padding: 5px;
    in-out property <length> padding-big: 10px;
    in-out property <length> border-radius-big: 10px;
    in-out property <length> border-radius: 5px;
    in-out property <length> menu-button-height: 40px;
    in-out property <length> menu-button-font-size: 18px;
    in-out property <length> pop-window-height: 30px;
    in-out property <length> pop-window-width: 300px;
    in-out property <length> pop-window-y: 10px;
    in-out property <length> pop-window-shadow-y: 5px;
    in-out property <length> pop-window-shadow-blur: 5px;
    in-out property <color> pop-window-shadow-color: rgba(0, 0, 0, 0.15);
    in-out property <length> anime-list-title-height: 30px;
    in-out property <length> todo-content-marker: 6px;
    in-out property <Tab> current-tab: Tab.Home;
}



export global TodoData {
    public pure function format-todokind(kind: TodoKind) -> string { 
        if (kind == TodoKind.Once) {
            return "单次";
        } else if (kind == TodoKind.Daily) {
            return "每日";
        } else if (kind == TodoKind.Weekly) {
            return "每周";
        } else if (kind == TodoKind.Monthly) {
            return "每月";
        } else {
            return "进度";
        }
    }
    public function convert-int-to-todokind(index: int) -> TodoKind {
        if (index == 0) {
            return TodoKind.Once;
        } else if (index == 1) {
            return TodoKind.Daily;
        } else if (index == 2) {
            return TodoKind.Weekly;
        } else if (index == 3) {
            return TodoKind.Monthly;
        } else {
            return TodoKind.Progress;
        };
    }
    public function convert-int-to-slintweekday(index: int) -> SlintWeekday {
        if (index == 0) {
            return SlintWeekday.Monday;
        } else if (index == 1) {
            return SlintWeekday.Tuesday;
        } else if (index == 2) {
            return SlintWeekday.Wednesday;
        } else if (index == 3) {
            return SlintWeekday.Thursday;
        } else if (index == 4) {
            return SlintWeekday.Friday;
        } else if (index == 5) {
            return SlintWeekday.Saturday;
        } else {
            return SlintWeekday.Sunday;
        };
    }
    public function convert-int-to-filter(index: int) -> Filter {
        if (index == 0) {
            return Filter.Today;
        } else if (index == 1) {
            return Filter.All;
        } else if (index == 2) {
            return Filter.Once;
        } else if (index == 3) {
            return Filter.Daily;
        } else if (index == 4) {
            return Filter.Weekly;
        } else if (index == 5) {
            return Filter.Monthly;
        } else {
            return Filter.Progress;
        };
        
    }
    callback add-todo(todo: Todo);
    callback remove-todo(id: string);
    callback duration-check(todo: Todo) -> bool;
    pure callback filter-todos(filter: Filter, todo: [Todo]) -> [Todo];
    callback update-calendar(new-date: Date);
    in-out property <[CalendarDay]> calendar;
    in-out property <Date> selected_date;
    in-out property <Date> current-date;
    in-out property <[Todo]> todo-list;
    in-out property <Filter> filter;
    in-out property <[Todo]> filtered-todo-list: filter-todos(filter, todo-list);
    in-out property <Date> default-date: {
        year: 2025,
        month: 1,
        day: 1
    };
    in-out property <Todo> new-todo;
    in-out property <Todo> default-todo: {
        text: "",
        created-at: "",
        recurrence: false,
        week: SlintWeekday.Monday,
        day: 1,
        once: default-date,
        is_expired: false,
        current-progress: 50,
        max-progress: 100,
        start-date: default-date,
        end-date: default-date,
        kind: TodoKind.Once,
        days-to-start: 0,
        note: "",
    };
}



